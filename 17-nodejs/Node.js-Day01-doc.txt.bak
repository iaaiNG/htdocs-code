Node.js day01-03
	1、Node.js：JavaScript 的运行时 runtime，基于Chrome的V8引擎，用于服务器端开发
	2、Node.js 和 JavaScript 的关系
		语法上 Node.js 与 JavaScript 基本一致
		1、JavaScript
			1、运行于客户端浏览器，每个浏览器都有一个：JavaScript 引擎；
			2、存在兼容性问题；
			3、DOM / BOM 对象；
			4、网页动画；
			5、异步请求。
		2、Node.js 
			1、运行于服务器端；
			2、不存在兼容性问题；
			3、文件，网络，数据库的访问；
			4、模块对象。
	3、Node.js 模块分类：
		1、核心模块；
		2、第三方模块；
		3、自定义模块。
	4、Node.js 模块：核心模块(一般直接引入，使用)
		1、全局模块(无需引入，直接使用)
			1、console 控制台
				console.log() 向标准输出 stdout 输出内容   
				console.info() 向标准输出 stdout 输出内容
				console.warn() 向标准错误输出 stderr 输出内容 
				console.error() 向标准错误输出 stderr 输出内容   
				console.trace() 向标准错误输出 stderr 输出栈信息
				console.time() 计时开始
				console.timeEnd() 计时结束，要求和 time() 的参数字符串完全一致 
			2、process 进程 thread 线程
				process.arch 查看系统架构：x64
				process.pid 进程标识符，当前显示是 Node.js 的执行进程的标识符
				process.platform 平台信息
				process.evn 系统环境信息
				process.execPath Node.js 执行路径
				process.versions 各种版本信息
				process.kill(pid) 结束标识符为 pid 的进程
				process.cwd() 当前工作目录的绝对路径
				process.memoryUsage() 系统内存信息
				process.uptime() Node.js 进程到当前代码经过的时间毫秒数
			3、buffe(缓冲区：内存当中开辟的一个存放数据的区域)
				缓冲区输出的形式默认是***十六进制***，一个 00 代表1个字节的数据
				new buffer(size) 开辟一个 size 字节的缓冲区，不推荐使用
				new buffer(array) 不推荐
				new buffer(string) 不推荐
				Buffer.from(array) 以数组 array 开辟缓冲区，数组的元素必须是数字 十进制、十六进制0x，八进制的0o
				Buffer.from(string) 以字符串 string 开辟一个缓冲区
				Buffer.alloc(size); 开辟一个 size 字节的缓冲区，推荐使用
				Buffer.allocUnsafe(size); 开辟一个 size 字节的缓冲区，Unsafe 不安全的：可能缓冲区内有一些别的数据
		2、工具模块
			1、querystring：查询字符串
				对象方法：
				1、parse：查询字符串 => JavaScript对象
				2、stringify：JavaScript对象 => 查询字符串
			2、url：地址字符串
				对象方法：
				1、parse(urlString, true)：地址 => 对象
				2、format：对象 => 地址 
			3、path：路径
				1、join：拼合路径
				2、isAbsolute：判断路径是否为绝对路径
				3、extname：获取文件扩展名	
			4、util：工具
				1、isArray
				2、isData
				3、isRegExp
				4、isError
			5、fs：file system
				1、readFile() 异步读取文件 (推荐，非阻塞)
				2、readFileSync() 同步读取文件 (小文件合适，阻塞)
				3、writeFile() 异步
				4、writeFileSync() 同步
			6、http
				1、服务器端：接收、处理、返回请求。
					const http = require('http')  //引入模块
					let server = http.createServer()  //创建实例
					server.on('request', (req, res)=>{  //监听 request 事件
						console.log(req.url)
						console.log(req.httpVersion)
						console.log(req.headers)
						res.end("JKM...")  //返回响应
					});
					server.listen(3000) //启动端口
				2、客户端：模拟客户发出请求。
					let option = { 
						host:'ip.taobao.com', 
						path:'/service/getIpInfo.php?ip=12.34.56.78' 
					}  // 指定服务器相关信息
					let request = http.request(option, (res)=>{  // 向服务器发出请求
						res.on('data', (buffer)=>{  // 监听data数据返回事件
							console.log(JSON.parse(buffer.toString()))
						})
					})
					request.end() 
	5、Node.js 模块：第三方模块
		1、使用步骤：
			1、利用npm命令，下载并安装；
			2、在JS文件中，利用require引用；
			3、使用第三方模块。
			npm：Node.js 的包管理器，管理Node.js的第三方模块。
		2、express (web 框架)
			1、安装：
				1、安装 npm 的淘宝镜像：npm install -g cnpm --registry=https://registry.npm.taobao.org
				2、安装express：npm install --save express
			2、使用：
				1、引入：const express = require('express');
				2、创建express对象：let app = express();
				3、监听端口：app.listen(3000);
				4、cmd查询占用端口号的进程：netstat -ano | findstr 3000
				5、cmd终止进程：taskkill /f /pid 6660
				6、Cannot GET /：指关于网站根目录的请求，当前没有处理。
					处理方式：app.get('/' (req, res)=>{...})
		3、mysql 模块
			1、cmd安装：cnpm install --save mysql
			2、基本使用步骤：
				1、引入：const mysql = require('mysql');
				2、创建连接：
					let connection = mysql.createConnection({
						user: 'root',
						password: '',
						port: 3306
					}) 
				3、取得数据：
					connection.connect((err) => {
						if (err) throw err;
						connection.query('select * from xz.xz_user', (err, results, fields) => {
							if (err) throw err;
							console.log(results)
						})
					}
			3、数据库连接池：(缓和数据库压力)
				const mysql = require('mysql')
				let pool = mysql.createPool({
					user: 'root',
					connectionLimit: 10  \\初始化数据库连接池的连接数量
					multipleStatements: true  \\同时执行多条SQL语句
				})
				pool.getConnection((err, connection) => {
					if (err) throw err;
					let uname = 'dingding'  
					let upwd = '123456'
					let sql = `select * from xz.xz_user where uname=? and upwd=md5(?)`;  
					\\ 放止 SQL Injection 注入："' or 'a'='a"
					connection.query(sql, [uname, upwd], (err, results, fields) => {
						if (err) throw err;
						console.log(results.length)  
						\\ results.insertId 返回新生成的主键值
						\\ results.affectedRows 返回影响的行数
					})
					connection.release()  \\ 释放连接
				})
			4、推荐方法：pool.query((sql, [params...], callback)  //自动释放
		4、bcryptjs：实现密码加密
			1、cmd安装：cnpm install --save bcryptjs
			2、基本使用步骤：
				const bcrypt = require('bcryptjs')
				let upwd = '123456'
				let salt = bcrypt.genSaltSync(10)
				let encryptedPwd = bcrypt.hashSync(upwd, salt)  //生成64位的加密密码
			3、利用 ocmpareSync 验证密码 返回：true/false
	6、Node.js 模块：自定义模块
			1、文件模块：文件本身作为模块：require('./*.js')
			2、目录模块：require('./目录名')
				1、目录下必须包含：index.js文件
				2、手动 或 利用cmd：npm init 创建package.json文件，指定主模块：{"main":"JS w文件"}
			3、每个 node_modules 下的 JS 文件也是一个模块：require('*.js')
			4、每个 node_modules 下的目录也是一个模块：require('*.js')
				1、目录下必须包含：index.js文件
				2、手动 或 利用cmd：npm init 创建package.json文件，指定主模块：{"main":"JS w文件"}
			5、使用引入模块的对象和方法
				1、模块实际是一个对象，具有构造方法
					// function(export , module, require, __dirname, __filename) {
					//     module.exports = {}
					//     exports = module.exports
						   console.log("this is module 1")
						   let age = 20
					//  }
				2、只有模块对象导出给外界的成员，才能被其他模块使用：
					1、导出：module.exports.age = age
					2、引入：let age = require('./x.js').age
			注意：模块对象都是：单例存在。多次 require 不会重复创建新对象，只引用已缓存的对象地址